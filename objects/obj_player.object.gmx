<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xMove        = 0;
yMove        = 0;
player_speed = 3;
timer        = 0;
state        = "IDLE";
facing       = "face_Idle";

points = 0;

// added code
hp=500;
tool=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>left = keyboard_check(vk_left);
right = keyboard_check(vk_right);
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
button_a = mouse_check_button(mb_left);
button_b = keyboard_check_pressed(vk_shift);

anim_speed = 0.2;

switch(state){
    case "ATTACK_START": {
        image_speed = 0;
        
        //playing sweeping sound
        audio_play_sound(snd_sweepSound, 10, false);
        
        xMove = 0;
        yMove = 0;
        timer = 10;
        
        switch(facing) {
            case "face_up": {
                sprite_index = spr_attack_up;
                image_xscale = 1;
                break;
            }
            case "face_down": {
                sprite_index = spr_attack_down;
                image_xscale = 1;
                break;
            }
            case "face_right": {
                sprite_index = spr_attack_side;
                image_xscale = -1;
                break;
            }
            case "face_left": {
                sprite_index = spr_attack_side;
                image_xscale = 1;
                break;
            }
        }//end switch facing
        
        state = "ATTACK_FINISH"
        break;
    }//end case attack start
    case "ATTACK_FINISH": {
        if (timer = 8){
        
            var currentItem;
        
            //setting current item for sprite creation
            switch(obj_player.tool){
                case 0:
                    currentItem = obj_broom_attack;
                    break;
                
                case 1: 
                    currentItem = obj_broom_attack;
                    break;
                
                case 2:
                    currentItem = obj_sponge_attack;
                    break;
            
                case 3:
                    currentItem = obj_mop_attack;
                    break;
            
                case 4:
                    currentItem = obj_vacuum_attack;
                    break;
                    
                case 5:
                    currentItem = obj_spray_attack;
                    break;
            }//end switch tool

        
            switch(facing){
                case "face_up": {
                    with(instance_create(x, y - 15, currentItem)){
                        image_angle = 0;
                    }
                    break;
                }
                case "face_down": {
                    with(instance_create(x, y + 15, currentItem)){
                        image_angle =180;
                    }
                    break;
                }
                case "face_left": {
                    with(instance_create(x - 15, y, currentItem)){
                        image_angle = 90;
                    }
                    break;
                }
                case "face_right": {
                    with(instance_create(x + 15, y, currentItem)){
                        image_angle = 270;
                    }
                    break;
                }
            }//end switch facing
        }//end if
    
        if(timer &gt; 0) {
            timer -= 1;
        }
        else {
            state = "IDLE";
        }
        break;
    }//end case attack finish
    case "IDLE": {
        image_speed = 0;
        
        xMove = 0;
        yMove = 0;
        
        scr_check_inputs();
        
        break;
    }//end case idle
    case "UP": {
        facing = "face_up";
        
        image_speed = anim_speed;
        sprite_index = spr_player_up;
        image_xscale = 1;
        
        xMove = 0;
        yMove = -1 * player_speed;
        
        scr_check_inputs();
        
        break;
    }//end case up
    case "DOWN": {
        facing = "face_down";
    
        image_speed = anim_speed;
        sprite_index = spr_player_down;
        image_xscale = 1;
        
        xMove = 0;
        yMove = 1 * player_speed;
        
        scr_check_inputs();
        
        break;
    }//end case down
    case "LEFT": {
        facing = "face_left";
    
        image_speed = anim_speed;
        sprite_index = spr_player_side;
        image_xscale = 1;
        
        xMove = -1 * player_speed;
        yMove = 0;
        
        scr_check_inputs();
        
        break;
    }//end case left
    case "RIGHT": {
        facing = "face_right";
    
        image_speed = anim_speed;
        sprite_index = spr_player_side;
        image_xscale = -1;
        
        xMove = 1 * player_speed;
        yMove = 0;
        
        scr_check_inputs();
        
        break;
    }//end case right
}//end switch


//checking for collisions
repeat(abs(xMove)){
    if(!place_meeting(x + sign(xMove), y, obj_solid)) {
        x += sign(xMove);
    }
    else {
        break;
    }
}

repeat(abs(yMove)){
    if(!place_meeting(x, y + sign(yMove), obj_solid)) {
        y += sign(yMove);
    }
    else {
        break;
    }
}

// added code
//-------------------------------------------------------------------------------//
// I'm commenting out the switch() for the tools because it removes the animation
// for the player walking, but that's because we need to draw the weapon on the sprite
// which I'll work on.

// if the player has 0 hp, then game over
image_alpha=hp/100;
if (hp&lt;=0){
    game_restart();
}    

// tool switching using switch()
// default tool equipped is none

/* switch(tool){
    case 0:
        sprite_index=spr_idle;
    break;
    
    case 1:
        sprite_index=spr_broom;
    break;
    
    case 2:
        sprite_index=spr_sponge;
    break;

    case 3:
        sprite_index=spr_mop_and_bucket;
    break;

    case 4:
        sprite_index=spr_vacuum;
    break;

    case 5:
        sprite_index=spr_cleaning_spray;
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tool&gt;0){
    tool--;
}else{
    tool=5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tool&lt;5){
    tool++;
}else{
    tool=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_healthbar(x-25, y-35, x+25, y-25, hp, c_black, c_red, c_green, 0, true, false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
